/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testvcs1.sales.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testvcs1.sales.OfflineReadWriteBundle;
import com.testvcs1.sales.service.OfflineReadWriteBundleService;


/**
 * Controller object for domain model class OfflineReadWriteBundle.
 * @see OfflineReadWriteBundle
 */
@RestController("sales.OfflineReadWriteBundleController")
@Api(value = "OfflineReadWriteBundleController", description = "Exposes APIs to work with OfflineReadWriteBundle resource.")
@RequestMapping("/sales/OfflineReadWriteBundle")
public class OfflineReadWriteBundleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OfflineReadWriteBundleController.class);

    @Autowired
	@Qualifier("sales.OfflineReadWriteBundleService")
	private OfflineReadWriteBundleService offlineReadWriteBundleService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new OfflineReadWriteBundle instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OfflineReadWriteBundle createOfflineReadWriteBundle(@RequestBody OfflineReadWriteBundle offlineReadWriteBundle) {
		LOGGER.debug("Create OfflineReadWriteBundle with information: {}" , offlineReadWriteBundle);

		offlineReadWriteBundle = offlineReadWriteBundleService.create(offlineReadWriteBundle);
		LOGGER.debug("Created OfflineReadWriteBundle with information: {}" , offlineReadWriteBundle);

	    return offlineReadWriteBundle;
	}

    @ApiOperation(value = "Returns the OfflineReadWriteBundle instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OfflineReadWriteBundle getOfflineReadWriteBundle(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting OfflineReadWriteBundle with id: {}" , id);

        OfflineReadWriteBundle foundOfflineReadWriteBundle = offlineReadWriteBundleService.getById(id);
        LOGGER.debug("OfflineReadWriteBundle details with id: {}" , foundOfflineReadWriteBundle);

        return foundOfflineReadWriteBundle;
    }

    @ApiOperation(value = "Updates the OfflineReadWriteBundle instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OfflineReadWriteBundle editOfflineReadWriteBundle(@PathVariable("id") Integer id, @RequestBody OfflineReadWriteBundle offlineReadWriteBundle) {
        LOGGER.debug("Editing OfflineReadWriteBundle with id: {}" , offlineReadWriteBundle.getId());

        offlineReadWriteBundle.setId(id);
        offlineReadWriteBundle = offlineReadWriteBundleService.update(offlineReadWriteBundle);
        LOGGER.debug("OfflineReadWriteBundle details with id: {}" , offlineReadWriteBundle);

        return offlineReadWriteBundle;
    }

    @ApiOperation(value = "Deletes the OfflineReadWriteBundle instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOfflineReadWriteBundle(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting OfflineReadWriteBundle with id: {}" , id);

        OfflineReadWriteBundle deletedOfflineReadWriteBundle = offlineReadWriteBundleService.delete(id);

        return deletedOfflineReadWriteBundle != null;
    }

    /**
     * @deprecated Use {@link #findOfflineReadWriteBundles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of OfflineReadWriteBundle instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OfflineReadWriteBundle> searchOfflineReadWriteBundlesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OfflineReadWriteBundles list by query filter:{}", (Object) queryFilters);
        return offlineReadWriteBundleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OfflineReadWriteBundle instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OfflineReadWriteBundle> findOfflineReadWriteBundles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OfflineReadWriteBundles list by filter:", query);
        return offlineReadWriteBundleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OfflineReadWriteBundle instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OfflineReadWriteBundle> filterOfflineReadWriteBundles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OfflineReadWriteBundles list by filter", query);
        return offlineReadWriteBundleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOfflineReadWriteBundles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return offlineReadWriteBundleService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOfflineReadWriteBundlesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = OfflineReadWriteBundle.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> offlineReadWriteBundleService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of OfflineReadWriteBundle instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOfflineReadWriteBundles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting OfflineReadWriteBundles");
		return offlineReadWriteBundleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOfflineReadWriteBundleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return offlineReadWriteBundleService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OfflineReadWriteBundleService instance
	 */
	protected void setOfflineReadWriteBundleService(OfflineReadWriteBundleService service) {
		this.offlineReadWriteBundleService = service;
	}

}