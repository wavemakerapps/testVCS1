/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testvcs1.sales.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testvcs1.sales.OfflineDeltaTable;
import com.testvcs1.sales.service.OfflineDeltaTableService;


/**
 * Controller object for domain model class OfflineDeltaTable.
 * @see OfflineDeltaTable
 */
@RestController("sales.OfflineDeltaTableController")
@Api(value = "OfflineDeltaTableController", description = "Exposes APIs to work with OfflineDeltaTable resource.")
@RequestMapping("/sales/OfflineDeltaTable")
public class OfflineDeltaTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OfflineDeltaTableController.class);

    @Autowired
	@Qualifier("sales.OfflineDeltaTableService")
	private OfflineDeltaTableService offlineDeltaTableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new OfflineDeltaTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OfflineDeltaTable createOfflineDeltaTable(@RequestBody OfflineDeltaTable offlineDeltaTable) {
		LOGGER.debug("Create OfflineDeltaTable with information: {}" , offlineDeltaTable);

		offlineDeltaTable = offlineDeltaTableService.create(offlineDeltaTable);
		LOGGER.debug("Created OfflineDeltaTable with information: {}" , offlineDeltaTable);

	    return offlineDeltaTable;
	}

    @ApiOperation(value = "Returns the OfflineDeltaTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OfflineDeltaTable getOfflineDeltaTable(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting OfflineDeltaTable with id: {}" , id);

        OfflineDeltaTable foundOfflineDeltaTable = offlineDeltaTableService.getById(id);
        LOGGER.debug("OfflineDeltaTable details with id: {}" , foundOfflineDeltaTable);

        return foundOfflineDeltaTable;
    }

    @ApiOperation(value = "Updates the OfflineDeltaTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OfflineDeltaTable editOfflineDeltaTable(@PathVariable("id") Integer id, @RequestBody OfflineDeltaTable offlineDeltaTable) {
        LOGGER.debug("Editing OfflineDeltaTable with id: {}" , offlineDeltaTable.getId());

        offlineDeltaTable.setId(id);
        offlineDeltaTable = offlineDeltaTableService.update(offlineDeltaTable);
        LOGGER.debug("OfflineDeltaTable details with id: {}" , offlineDeltaTable);

        return offlineDeltaTable;
    }

    @ApiOperation(value = "Deletes the OfflineDeltaTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOfflineDeltaTable(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting OfflineDeltaTable with id: {}" , id);

        OfflineDeltaTable deletedOfflineDeltaTable = offlineDeltaTableService.delete(id);

        return deletedOfflineDeltaTable != null;
    }

    /**
     * @deprecated Use {@link #findOfflineDeltaTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of OfflineDeltaTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OfflineDeltaTable> searchOfflineDeltaTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OfflineDeltaTables list by query filter:{}", (Object) queryFilters);
        return offlineDeltaTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OfflineDeltaTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OfflineDeltaTable> findOfflineDeltaTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OfflineDeltaTables list by filter:", query);
        return offlineDeltaTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OfflineDeltaTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OfflineDeltaTable> filterOfflineDeltaTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OfflineDeltaTables list by filter", query);
        return offlineDeltaTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOfflineDeltaTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return offlineDeltaTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOfflineDeltaTablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = OfflineDeltaTable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> offlineDeltaTableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of OfflineDeltaTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOfflineDeltaTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting OfflineDeltaTables");
		return offlineDeltaTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOfflineDeltaTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return offlineDeltaTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OfflineDeltaTableService instance
	 */
	protected void setOfflineDeltaTableService(OfflineDeltaTableService service) {
		this.offlineDeltaTableService = service;
	}

}