/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testvcs1.sales.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testvcs1.sales.Client;


/**
 * ServiceImpl object for domain model class Client.
 *
 * @see Client
 */
@Service("sales.ClientService")
@Validated
public class ClientServiceImpl implements ClientService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ClientServiceImpl.class);


    @Autowired
    @Qualifier("sales.ClientDao")
    private WMGenericDao<Client, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Client, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "salesTransactionManager")
    @Override
    public Client create(Client client) {
        LOGGER.debug("Creating a new Client with information: {}", client);

        Client clientCreated = this.wmGenericDao.create(client);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(clientCreated);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Client getById(Integer clientId) {
        LOGGER.debug("Finding Client by id: {}", clientId);
        return this.wmGenericDao.findById(clientId);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Client findById(Integer clientId) {
        LOGGER.debug("Finding Client by id: {}", clientId);
        try {
            return this.wmGenericDao.findById(clientId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Client found with id: {}", clientId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public List<Client> findByMultipleIds(List<Integer> clientIds, boolean orderedReturn) {
        LOGGER.debug("Finding Clients by ids: {}", clientIds);

        return this.wmGenericDao.findByMultipleIds(clientIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "salesTransactionManager")
    @Override
    public Client update(Client client) {
        LOGGER.debug("Updating Client with information: {}", client);

        this.wmGenericDao.update(client);
        this.wmGenericDao.refresh(client);

        return client;
    }

    @Transactional(value = "salesTransactionManager")
    @Override
    public Client delete(Integer clientId) {
        LOGGER.debug("Deleting Client with id: {}", clientId);
        Client deleted = this.wmGenericDao.findById(clientId);
        if (deleted == null) {
            LOGGER.debug("No Client found with id: {}", clientId);
            throw new EntityNotFoundException(String.valueOf(clientId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "salesTransactionManager")
    @Override
    public void delete(Client client) {
        LOGGER.debug("Deleting Client with {}", client);
        this.wmGenericDao.delete(client);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Page<Client> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Clients");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Page<Client> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Clients");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service sales for table Client to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service sales for table Client to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "salesTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}